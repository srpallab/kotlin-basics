* Section 1   : Introduction
* Section 2   : Data Binding Fundamentals
** A Simple Data Binding
   - Enable Data Binding in android section at ~build.gradle:(app)~
     #+begin_src fundamental
       android {
	 ..........
	 ..........
	 buildFeatures {
	   dataBinding = true
	 }
	 ..........
       }
     #+end_src
   - Wrap XML with layout tag
     #+begin_src xml
       <?xml version="1.0" encoding="utf-8"?>
       <layout xmlns:android="http://schemas.android.com/apk/res/android"
	       xmlns:app="http://schemas.android.com/apk/res-auto"
	       xmlns:tools="http://schemas.android.com/tools">
	 <androidx.constraintlayout.widget.ConstraintLayout
	     android:layout_width="match_parent"
	     android:layout_height="match_parent"
	     tools:context=".MainActivity">
	   ..............................................
	   ..............................................
	   ..............................................
	   ..............................................
	 </androidx.constraintlayout.widget.ConstraintLayout>
       </layout>
     #+end_src
   - Construct a Data Binding object in the Activity
     #+begin_src kotlin
       class MainActivity : AppCompatActivity() {
	   private lateinit var binding: ActivityMainBinding
	   override fun onCreate(savedInstanceState: Bundle?) {
	       super.onCreate(savedInstanceState)
	       binding = DataBindingUtil.setContentView(this,R.layout.activity_main)
	   }
       }
     #+end_src
   - Eliminate ~findViewById()~
   - How to pass an object(data) to the xml layout and use them
     directly.
     #+begin_src xml
       <data>
	 <variable
	     name="student"
	     type="com.anushka.bindingdemo3.Student" />
       </data>
     #+end_src
   - In the activity, assign the data object to that defined layout
     variable 
     #+begin_src kotlin
       class MainActivity : AppCompatActivity() {
	   private lateinit var binding: ActivityMainBinding
	   override fun onCreate(savedInstanceState: Bundle?) {
	       super.onCreate(savedInstanceState)
	       binding = DataBindingUtil.setContentView(this,R.layout.activity_main)
	       binding.student = getStudent()
	   }
	   private fun getStudent():Student{
	       return Student(1,"Alex","alex@gmail.com")
	   }
       }
     #+end_src
   - In xml layout   Use the properties of the object in xml view
     components using binding expressions.  
     #+begin_src xml
	<TextView
	   android:id="@+id/name_text"
	   android:layout_width="wrap_content"
	   android:layout_height="wrap_content"
	   .............
	   android:text="@{student.name}"
	   .............
	   .............
	   .............
	   app:layout_constraintVertical_bias="0.415" />
     #+end_src
* Section 3   : Working With ~ViewModels~
  - When we are using an android app, when a configuration change like
    screen rotation happens, app has to destroy and recreate the
    activity or fragment with new configurations.
  - As a result of that, values(states) created during the running
    period of the activity will also be destroyed.
  - The Android Jetpack View Model architecture component has
    introduced as a solution for above problem. We can use a view
    model object to safely keep and retrieve values(states) of that
    activity. (Note: this only available during the run time of the
    app, if we need a permanent data storage we need to use a
    database)
  - As its name says, view model is a model for a view. We usually
    create a view model for each activity.
  - A ViewModel’s onCleared() is called only when the app is put into
    the background and the app process is killed in order to free up
    the system’s memory.Therefore, lifecycle changes of activities and
    fragments does not affect to their ViewModels.(Activities and
    fragments may destroy and recreate, but view model will live
    throughout the process)
  - Create a ~ViewModel~ Class
    #+begin_src kotlin
      class MainActivityViewModel : ViewModel() {
	  ...........
	  ...........
	  ...........
      }
    #+end_src
  - Get an instance(object) of a ViewModel using ViewModel provider.
    #+begin_src kotlin
      private lateinit var viewModel: MainActivityViewModel
      override fun onCreate(savedInstanceState: Bundle?) {
	  super.onCreate(savedInstanceState)
	      .......
	  viewModel = ViewModelProvider(this).get(MainActivityViewModel::class.java)
	      .......
      }
    #+end_src
  - Create A ~ViewModelFactory~
    #+begin_src kotlin
      class MainActivityViewModelFactory(private val startingTotal : Int) : ViewModelProvider.Factory {
	  override fun <T : ViewModel> create(modelClass: Class<T>): T {
	      if (modelClass.isAssignableFrom(MainActivityViewModel::class.java)){
		  return MainActivityViewModel(startingTotal) as T
	      }
	      throw IllegalArgumentException("Unknown View Model Class")
	  }
      }
    #+end_src
  - Get an instance(object) of a ViewModel when using a
    ~ViewModelFactory~.
    #+begin_src kotlin
      class MainActivity : AppCompatActivity() {
	  private lateinit var viewModel: MainActivityViewModel
	  private lateinit var viewModelFactory: MainActivityViewModelFactory
	  override fun onCreate(savedInstanceState: Bundle?) {
	      .........
	      viewModelFactory = MainActivityViewModelFactory(125)
	      viewModel = ViewModelProvider(this,viewModelFactory).get(MainActivityViewModel::class.java)
		  .........
	  }
      }
    #+end_src


* Section 4   : Live Data
* Section 5   : View Model & Live Data With Data Binding
* Section 6   : Activity And Fragment Life Cycles
* Section 7   : Navigation Architecture Component
* Section 8   : Android RecyclerView Fundamentals
* Section 9   : Kotlin ~Coroutine~ Part 1 : Fundamentals
* Section 10  : Room Data Persistence Library With ~MVVM~
* Section 11  : Room Migrations
* Section 12  : Retrofit With ~Coroutines~
* Section 13  : Notifications
* Section 14  : Work Manager
* Section 15  : Dependency Injection With Dagger 2
* Section 16  : MVVM Clean Architecture Project Example 1
* Section 17  : Unit Testing
* Section 18  : View Binding
* Section 19  : Dagger Hilt
* Section 20  : MVVM Clean Architecture Project Example 2 (using Hilt & Flow )
* Section 21  : Jetpack Compose Fundamentals
* Section 22  : State In Jetpack Compose
* Section 23  :  Kotlin Coroutine Part 2 : Working With Flows
* Section 24  :  Jetpack compose MVVM Project Example 1
* Section 25  :  Effect Handlers In Jetpack Compose
* Section 26  : Introduction
* Section 27  :  Easier SQLite With Room
* Section 28  :  Android Data Binding Mastery 
* Section 29  :  Complete MVVM Project Example
* Section 30  :  Retrofit Crash Course
* Section 31  :  Retrofit With View Model, Live Data And Data Binding 
* Section 32  :  Android Paging Library
* Section 33  :  SOLID Principles Of Object Oriented Software Engineering
* Section 34  :  Dependency Injection With Dagger
* Section 35  :  Android Work Manager
* Section 36  :  Navigation Architecture Components Framework 
* Section 37  :  Lifecycle Aware Components
* Section 38  :  Conclusion And Bonus Lecture
